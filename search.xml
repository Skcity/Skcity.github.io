<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/12/28/02.sort/</url>
    <content><![CDATA[<h4 id="时间复杂度比较"><a href="#时间复杂度比较" class="headerlink" title="时间复杂度比较"></a>时间复杂度比较</h4><ul>
<li>冒泡排序和直接插入排序最好的情况是$O(n)$,简单选择排序最好情况也是$O(n^2)$,因为<strong>简单选择排序与初始序列无关</strong>。堆排序建堆的时间复杂度为$O(n)$,完成排序的时间复杂度为$O(nlog_2n)$.</li>
<li>快速排序的平均时间复杂度为$O(nlog_2n)$（平均情况下每个元素需要进行$O(log_2n)$次排序，一共n个元素）,最坏情况是$O(n^2)$。同归并排序。</li>
</ul>
<h4 id="空间复杂度比较"><a href="#空间复杂度比较" class="headerlink" title="空间复杂度比较"></a>空间复杂度比较</h4><ul>
<li>简单选择排序、插入排序、冒泡排序、希尔排序、堆排序都仅需常数个辅助空间。</li>
<li>快速排序需要$O(log_2n)$个递归工作站，最坏情况下需要n个。</li>
<li>两路归并排序需要$O(n)$个额外空间</li>
</ul>
<h4 id="算法稳定性比较"><a href="#算法稳定性比较" class="headerlink" title="算法稳定性比较"></a>算法稳定性比较</h4><p>稳定：插入排序、冒泡排序、归并排序、基数排序<br>不稳定：简单选择排序、快速排序、希尔排序、堆排序</p>
<h4 id="排序算法的选取方法："><a href="#排序算法的选取方法：" class="headerlink" title="排序算法的选取方法："></a>排序算法的选取方法：</h4><p><strong>考虑的因素</strong></p>
<ul>
<li>待排序元素个数n</li>
<li>元素本身信息量的大小</li>
<li>关键字结构及其分布情况</li>
<li>稳定性的要求</li>
</ul>
<p><strong>结论</strong></p>
<ul>
<li>若元素已经基本有序，则可选择直接插入排序或冒泡排序</li>
<li>若n较大，则选择快速排序、堆排序、归并排序，若同时还要求稳定性，则选择归并排序</li>
<li>基于比较的排序算法，时间复杂度至少为$O(nlog_2n)$。</li>
</ul>
<p><strong>分类</strong></p>
<ol>
<li>内部排序：数据都在内存中,<strong>关心如何使算法的事件复杂度与空间复杂度尽量低</strong></li>
<li>外部排序：数据太多，无法放入内存，<strong>关心如何使磁盘读写次数更少</strong></li>
</ol>
<p><strong>排序比较次数的结论</strong>：<br>对任意n个关键字进行基于比较的排序，至少需要对比多少次？<br>每比较两个关键字，会出现两种结果和可能，因此比较h次能得到$2^h$种情况；而n个关键字有$n!$种排列，因此有<br>$$2^h&gt;n!$$</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h5 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从小到大排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,i&lt;n,i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;   <span class="comment">// 判断该元素是否需要进行插入排序</span></span><br><span class="line">            temp=A[i];     <span class="comment">// 暂存待插入元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;temp;j--)&#123;  <span class="comment">// 查找插入的位置,</span></span><br><span class="line">                A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">            &#125;</span><br><span class="line">            A[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效率分析：</strong><br>空间复杂度$O(1)$<br>时间复杂度：最好$O(n)$，最差$O(n^2)$<br><strong>优化：</strong> 折半插入排序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">binaryInsertionSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> key=A[i], left=<span class="number">0</span>,right=i<span class="number">-1</span>;  <span class="comment">// 确定待插入元素与二分查找的范围（插入范围）</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right&gt;)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[mid]&gt;A[i])&#123;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;left;j--)&#123;</span><br><span class="line">            A[j]=A[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入到正确的位置</span></span><br><span class="line">        A[left]=A[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>折半插入排序</strong></p>
<h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p><strong>思想</strong>:先追求表中的元素部分有序，再逐渐逼近全局有序</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot=A[low]; <span class="comment">// 将表中的第一个元素设为枢纽，对表进行划分</span></span><br><span class="line">    <span class="keyword">while</span>(low&gt;high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot) high--;</span><br><span class="line">        A[low]=A[high];</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot) low++;</span><br><span class="line">        A[high]=A[low];</span><br><span class="line">    &#125;</span><br><span class="line">    A[low]=pivot;   <span class="comment">// 枢纽元素存放到最终位置</span></span><br><span class="line">    <span class="keyword">return</span> low;     <span class="comment">// 返回枢纽元素的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="type">int</span> pivotpos=<span class="built_in">Partition</span>(A,low,high);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,low,pivotpos<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,pivotpos+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>拓展：</strong> 查找第k小—查找中位数—快速选择（要求时间复杂度O(n)）</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot=A[low]; <span class="comment">// 将表中的第一个元素设为枢纽，对表进行划分</span></span><br><span class="line">    <span class="keyword">while</span>(low&gt;high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot) high--;</span><br><span class="line">        A[low]=A[high];</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot) low++;</span><br><span class="line">        A[high]=A[low];</span><br><span class="line">    &#125;</span><br><span class="line">    A[low]=pivot;   <span class="comment">// 枢纽元素存放到最终位置</span></span><br><span class="line">    <span class="keyword">return</span> low;     <span class="comment">// 返回枢纽元素的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low,<span class="type">int</span> high, <span class="type">int</span> k)</span> </span>&#123; </span><br><span class="line">    pivotPosition=<span class="built_in">Partition</span>(A,low,high);</span><br><span class="line">    <span class="keyword">if</span>(k &lt; pivotPosition) <span class="keyword">return</span> <span class="built_in">kthSmallest</span>(A,low,piovtPosistion<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(k &gt; piovtPosition) <span class="keyword">return</span> <span class="built_in">kthSmallest</span>(A,piovtposistion+<span class="number">1</span>,high);</span><br><span class="line">    <span class="keyword">if</span>(k==piovtPosistion) <span class="keyword">return</span> A[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>基于完全二叉树<br><strong>建立大根堆：</strong><br>从最后一个非叶结点（$n&#x2F;2$）开始向上检查，若小于孩子结点，则将其与孩子结点的最大的一个进行替换，若替换的元素破坏了下一级的堆，则采用相同的方法继续往下调整</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildMaxHeap</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">HeadAdjust</span>(A,i,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将以K为根节点的子树调整为大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeadJust</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> k,<span class="type">int</span> len )</span></span>&#123;</span><br><span class="line">    A[<span class="number">0</span>]=A[k]; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>*k;i&lt;len;i*=<span class="number">2</span>)&#123;      </span><br><span class="line">        <span class="keyword">if</span>(i&lt;len&amp;&amp;A[i]&lt;A[i+<span class="number">1</span>]) i++;   <span class="comment">// 寻找对最大的孩子结点，若右孩子更大则去右边</span></span><br><span class="line">        <span class="keyword">if</span>(A[<span class="number">0</span>]&gt;A[i])  <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            A[k]=A[i];</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[k]=A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>基于大根堆进行排序</strong>：<br>每一趟将堆顶元素与最后一个元素交换，最后对根节点向下调整</p>
<p><strong>算法效率分析</strong>：<br>建堆过程中，关键字对比次数不超过4n，时间复杂度为O(n)<br>排序时，每次对根节点进行调整，复杂度为$O(nlog_2n)$<br><strong>则堆排序的时间复杂度为$O(nlog_2n)$</strong>,空间复杂度为O(1)<br>稳定性：不稳定</p>
<p><strong>插入新元素</strong>：将新元素放在表尾，随后于父节点进行对比，递归上升<br><strong>删除元素</strong>：被删除的元素用孩子结点替代，一路下坠，直到成为叶结点</p>
<h4 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *B=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(k=low;k&lt;=high;k++)&#123;</span><br><span class="line">        B[k]=A[k];          <span class="comment">// 将A中所有的元素复制到B中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(B[i]&lt;=B[j])&#123;</span><br><span class="line">            A[k]=B[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            A[K]=B[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=mid) A[k++]=B[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high) A[k++]=B[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(A,low,mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(A,mid+<span class="number">1</span>,high);</span><br><span class="line">        <span class="built_in">MergeSort</span>(A,low,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>归并效率分析</strong><br>n个元素进行二路归并，<br><strong>等价于计算：</strong> 完全二叉树最后一层有n个节点，树高-1即为需要归并的次数，为 $\lceil log_2n \rceil$;每趟归并的时间复杂度为$O(n)$，则归并排序的时间复杂度为$O(nlog_2n)$</p>
<p><strong>空间复杂度</strong>：辅助数组B，O(n)<br><strong>归并排序为稳定排序算法</strong></p>
<h4 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h4><p>按个位、十位、百位依次排序，每一位的取值数量称为<strong>基数</strong><br><strong>基数排序不是基于比较的算法</strong></p>
<blockquote>
<p><strong>思想</strong>：若待排序的目标有多个关键字，为了使依次有序，应该反向开始排序。譬如每个项目有关键字a1,a2,a3，为了使a1相同时a2有序、a2相同时a3有序，则应该先对a3进行排序</p>
</blockquote>
<p><strong>空间复杂度</strong>：O(r)<br><strong>时间复杂度</strong>：一趟分配：O(n)，一趟收集O(r)，总共d趟，为：O(d(n+r))<br><strong>基数排序是稳定的</strong></p>
<p><strong>基数排序擅长解决的问题</strong>：</p>
<ul>
<li>关键字可以拆为d组，且d较小</li>
<li>每一组关键字的取值范围不大，即r较小</li>
<li>数据元素个数n较大</li>
</ul>
<h4 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h4><p><strong>时间开销分析：</strong></p>
<ul>
<li>生成初始归并段：每个磁盘块进入一次内存，进行一次磁盘读写</li>
</ul>
<p>增加归并的路数可以减少趟数，即减小磁盘的访问次数</p>
<p><strong>K路平衡归并</strong>：</p>
<ul>
<li>最多只能有k个段归并为一个</li>
<li>每一趟归并中，若有m个归并段参与归并，则经过这一趟处理得到$\lceil \frac{m}{k} \rceil$个新的归并段<blockquote>
<p>为了提高外排序效率：<br><strong>①增加归并的路数</strong>：增加归并路数后，为了解决归并时选取最大、最小关键字的对比效率问题，可以采用败者树<br><strong>②增加最小归并段长度</strong> ：为了创建比内存工作区更大的初始归并段，可以采用置换选择排序算法</p>
</blockquote>
</li>
</ul>
<h4 id="败者树"><a href="#败者树" class="headerlink" title="败者树"></a>败者树</h4><ol>
<li>对于K路归并，第一次构建败者树需要对比关键字K-1次</li>
<li>有了败者树、选出最小元素、只需对比关键字$\lceil log_2k \rceil$次</li>
</ol>
<h4 id="置换选择排序"><a href="#置换选择排序" class="headerlink" title="置换选择排序"></a>置换选择排序</h4><p>目标：创建一个比内存工作区更大的初始归并段<br>细节：内存工作区构建归并段时，理论上是把每个关键字输出到磁盘，但实际上有一个输出缓冲区，等一个归并段构建完毕后才整个写回外存</p>
<h4 id="最佳归并树"><a href="#最佳归并树" class="headerlink" title="最佳归并树"></a>最佳归并树</h4><p>背景：经过置换选择排序，得到了几个初始归并段，各占用不同数量的磁盘块<br>目标：使随后的归并过程中磁盘的读写次数最少<br>重要结论：归并过程中的磁盘I&#x2F;O次数&#x3D;归并段的WPL<em>2（WPL：带权路径长度）*<em>即构造哈夫曼树</em></em></p>
<p>对于K叉归并，若初始归并段的数量无法构成严格的K叉归并树、则需要补充几个长度为0的虚断，再进行k叉哈夫曼树的构造<br><img src="/bf3ffb62f59bda2f4a4450d097f89b9.jpg" alt="Alt text"><br>如上图也可以比较方便地计算需要的虚段数量</p>
<h4 id="查缺补漏"><a href="#查缺补漏" class="headerlink" title="查缺补漏"></a>查缺补漏</h4><p>快速排序空间复杂度：按栈的空间计算，平均为$O(log_2n)$,最坏为$O(n)$</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/12/28/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>康复训练</category>
      </categories>
      <tags>
        <tag>tags</tag>
      </tags>
  </entry>
</search>
